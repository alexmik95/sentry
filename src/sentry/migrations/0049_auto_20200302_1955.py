# -*- coding: utf-8 -*-
# Generated by Django 1.11.28 on 2020-03-02 18:25
from __future__ import unicode_literals

from datetime import datetime
from django.db import migrations
from django.db.models import OuterRef, Exists


def mark_all_projects_completed_alert_rule_onboarding(apps, schema_editor):
    from sentry.utils.query import RangeQuerySetWrapperWithProgressBar
    from sentry.models import OnboardingTaskStatus, OnboardingTask

    Project = apps.get_model("sentry", "project")
    OrganizationOnboardingTask = apps.get_model("sentry", "organizationonboardingtask")

    # Locate all projects, annotated which have not completed alert onboarding
    # tasks.
    #
    # Queryplan:
    #
    #   Seq Scan on sentry_project (cost=0.00..24836341662.11 rows=297362 width=103)
    #   Filter: ((date_added <= '2020-03-02 00:00:00+00'::timestamp with time zone) AND (NOT (alternatives: SubPlan 3 or hashed SubPlan 4)))
    #   SubPlan 1
    #   -> Seq Scan on sentry_organizationonboardingtask u0 (cost=0.00..27838.89 rows=1 width=0)
    #   Filter: ((status = 1) AND (project_id = sentry_project.id) AND (task = 10))
    #   SubPlan 2
    #   -> Seq Scan on sentry_organizationonboardingtask u0_1 (cost=0.00..25585.33 rows=20264 width=8)
    #   Filter: ((status = 1) AND (task = 10))
    #   SubPlan 3
    #   -> Seq Scan on sentry_organizationonboardingtask u0_2 (cost=0.00..27838.89 rows=1 width=0)
    #   Filter: ((status = 1) AND (project_id = sentry_project.id) AND (task = 10))
    #   SubPlan 4
    #   -> Seq Scan on sentry_organizationonboardingtask u0_3 (cost=0.00..25585.33 rows=20264 width=8)
    #   Filter: ((status = 1) AND (task = 10))
    target_projects = Project.objects.annotate(
        alert_task_complete=Exists(
            OrganizationOnboardingTask.objects.filter(
                organization_id=OuterRef("organization_id"),
                project_id=OuterRef("id"),
                task=OnboardingTask.ALERT_RULE,
                status=OnboardingTaskStatus.COMPLETE,
            )
        )
    )

    for project in RangeQuerySetWrapperWithProgressBar(target_projects):
        if project.alert_task_complete:
            continue

        OrganizationOnboardingTask.objects.update_or_create(
            organization_id=project.organization_id,
            project_id=project.id,
            task=OnboardingTask.ALERT_RULE,
            defaults={"status": OnboardingTaskStatus.COMPLETE},
        )


class Migration(migrations.Migration):
    # This flag is used to mark that a migration shouldn't be automatically run in
    # production. We set this to True for operations that we think are risky and want
    # someone from ops to run manually and monitor.
    # General advice is that if in doubt, mark your migration as `is_dangerous`.
    # Some things you should always mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that
    #   they can be monitored. Since data migrations will now hold a transaction open
    #   this is even more important.
    # - Adding columns to highly active tables, even ones that are NULL.
    is_dangerous = True

    # This flag is used to decide whether to run this migration in a transaction or not.
    # By default we prefer to run in a transaction, but for migrations where you want
    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
    # want to create an index concurrently when adding one to an existing table.
    atomic = False

    dependencies = [("sentry", "0048_auto_20200302_1825")]

    operations = [migrations.RunPython(mark_all_projects_completed_alert_rule_onboarding)]
